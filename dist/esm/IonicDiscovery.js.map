{"version":3,"file":"IonicDiscovery.js","sourceRoot":"","sources":["../../src/IonicDiscovery.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,cAAc;IACvB;;;OAGG;IACH,KAAK;QACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACH,IAAI;QACA,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,WAAW;QACP,OAAO,IAAI,OAAO,CAAW,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC7C,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;IACP,CAAC;CACJ","sourcesContent":["import { Services } from \"./Services\";\n\nexport class IonicDiscovery {\n    /**\n     * Start listening for broadcast services\n     * @returns void\n     */\n    start(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            window.cordova.exec(resolve, reject, \"IonicDiscover\", \"start\");\n        });\n    }\n\n    /**\n     * Stop listening for broadcast services\n     * @returns void\n     */\n    stop(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            window.cordova.exec(resolve, reject, \"IonicDiscover\", \"stop\");\n        });\n    }\n\n    getServices(): Promise<Services> {\n        return new Promise<Services>((resolve, reject) => {\n            window.cordova.exec(resolve, reject, \"IonicDiscover\", \"getServices\");\n        });\n    }\n}\n"]}